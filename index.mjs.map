{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport rescape from '@stdlib/utils-escape-regexp-string' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport isRegExp from '@stdlib/assert-is-regexp' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport base from '@stdlib/string-base-replace' ;\n\n\n// MAIN //\n\n/**\n* Replaces search occurrences with a replacement string.\n*\n* @param {string} str - input string\n* @param {(string|RegExp)} search - search expression\n* @param {(string|Function)} newval - replacement value or function\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument argument must be a string or regular expression\n* @throws {TypeError} third argument must be a string or function\n* @returns {string} new string containing replacement(s)\n*\n* @example\n* var str = 'beep';\n* var out = replace( str, 'e', 'o' );\n* // returns 'boop'\n*\n* @example\n* var str = 'Hello World';\n* var out = replace( str, /world/i, 'Mr. President' );\n* // returns 'Hello Mr. President'\n*\n* @example\n* import capitalize from '@stdlib/string-capitalize' ;\n*\n* var str = 'Oranges and lemons say the bells of St. Clement\\'s';\n*\n* function replacer( match, p1 ) {\n*     return capitalize( p1 );\n* }\n*\n* var out = replace( str, /([^\\s]*)/gi, replacer);\n* // returns 'Oranges And Lemons Say The Bells Of St. Clement\\'s'\n*/\nfunction replace( str, search, newval ) {\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0hV3R', str ) );\n\t}\n\tif ( isString( search ) ) {\n\t\tsearch = new RegExp( rescape( search ), 'g' );\n\t} else if ( !isRegExp( search ) ) {\n\t\tthrow new TypeError( format( '0hVBB', search ) );\n\t}\n\tif ( !isString( newval ) && !isFunction( newval ) ) {\n\t\tthrow new TypeError( format( '0hVBC', newval ) );\n\t}\n\treturn base( str, search, newval );\n}\n\n\n// EXPORTS //\n\nexport default replace;\n"],"names":["replace","str","search","newval","isString","TypeError","format","RegExp","rescape","isRegExp","isFunction","base"],"mappings":";;ijBAiEA,SAASA,EAASC,EAAKC,EAAQC,GAC9B,IAAMC,EAAUH,GACf,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAEvC,GAAKG,EAAUF,GACdA,EAAS,IAAIK,OAAQC,EAASN,GAAU,UAClC,IAAMO,EAAUP,GACtB,MAAM,IAAIG,UAAWC,EAAQ,QAASJ,IAEvC,IAAME,EAAUD,KAAaO,EAAYP,GACxC,MAAM,IAAIE,UAAWC,EAAQ,QAASH,IAEvC,OAAOQ,EAAMV,EAAKC,EAAQC"}